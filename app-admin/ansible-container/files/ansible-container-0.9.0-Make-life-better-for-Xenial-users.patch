From 9ea1622e4dc8114009595bd2b30ae628c7cb1303 Mon Sep 17 00:00:00 2001
From: Chris Houseknecht <chouseknecht@ansible.com>
Date: Fri, 21 Apr 2017 16:24:50 -0400
Subject: [PATCH] Make life better for Xenial users (#453)

* Removes lsb_release on ubuntu. Adds --use-local-python build option.

* Doc update for --use-local-python
---
 AUTHORS                                            |  1 +
 container/cli.py                                   | 16 +++---
 container/core.py                                  | 64 +++++++++++++---------
 container/docker/templates/conductor-dockerfile.j2 |  1 +
 docs/rst/reference/build.rst                       |  8 +--
 5 files changed, 52 insertions(+), 38 deletions(-)

diff --git a/AUTHORS b/AUTHORS
index 329f498..6d08282 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -35,6 +35,7 @@ Andrea De Pirro <andrea.depirro@yameveo.com>
 Erik Nelson <erik@nsk.io>
 Jeff Geerling <geerlingguy@mac.com>
 Shea Stewart <shea.stewart@arctiq.ca>
+fignew <thomas@vorget.com>
 Trishna Guha <trishnaguha17@gmail.com>
 John R Barker <john@johnrbarker.com>
 Sidharth Surana <ssurana@vmware.com>
diff --git a/container/cli.py b/container/cli.py
index 3ded0cc..c3121b5 100644
--- a/container/cli.py
+++ b/container/cli.py
@@ -126,15 +126,13 @@ def subcmd_build_parser(self, parser, subparser):
                                     u'changes have been made necessitating rebuild. '
                                     u'You may disable layer caching with this flag.',
                                dest='cache', default=True)
-        subparser.add_argument('--python-interpreter', action='store',
-                               help=u'Ansible Container brings its own Python runtime '
-                                    u'into your target containers for Ansible to use. '
-                                    u'If you would like to bring your own Python runtime '
-                                    u'instead, use this to specify the path to that '
-                                    u'runtime.', dest='python_interpreter', default=None)
-        subparser.add_argument('--services', action='store',
-                               help=u'Rather than build all services, only build specific services.',
-                               nargs='+', dest='services_to_build', default=None)
+        subparser.add_argument('--use-local-python', action='store_true',
+                               help=u'Prevents Ansible Container from bringing its own Python runtime '
+                                    u'into target containers in order to run Ansible. Use when the target '
+                                    u'already has an installed Python runtime.',
+                               dest='local_python', default=False)
+        subparser.add_argument('--no-conductor-runtime', action='store_false',
+                               help=u'')
         subparser.add_argument('ansible_options', action='store',
                                help=u'Provide additional commandline arguments to '
                                     u'Ansible in executing your playbook. If you '
diff --git a/container/core.py b/container/core.py
index 6fa0524..f211d7a 100644
--- a/container/core.py
+++ b/container/core.py
@@ -473,8 +473,8 @@ def resolve_push_to(push_to, default_url):
 
 
 @conductor_only
-def run_playbook(playbook, engine, service_map, ansible_options='',
-                 python_interpreter=None, debug=False, deployment_output_path=None, tags=None, **kwargs):
+def run_playbook(playbook, engine, service_map, ansible_options='', local_python=False, debug=False,
+                 deployment_output_path=None, tags=None, **kwargs):
     uid, gid = kwargs.get('host_user_uid', 1), kwargs.get('host_user_gid', 1)
 
     try:
@@ -495,9 +495,14 @@ def run_playbook(playbook, engine, service_map, ansible_options='',
         inventory_path = os.path.join(output_dir, 'hosts')
         with open(inventory_path, 'w') as ofs:
             for service_name, container_id in service_map.items():
-                ofs.write('%s ansible_host="%s" ansible_python_interpreter="%s"\n' % (
-                    service_name, container_id,
-                    python_interpreter or engine.python_interpreter_path))
+                if not local_python:
+                    # Use Python runtime from conductor
+                    ofs.write('%s ansible_host="%s" ansible_python_interpreter="%s"\n' % (
+                        service_name, container_id, engine.python_interpreter_path))
+                else:
+                    # Use local Python runtime
+                    ofs.write('%s ansible_host="%s"\n' % (service_name, container_id))
+
 
         if not os.path.exists(os.path.join(output_dir, 'files')):
             os.mkdir(os.path.join(output_dir, 'files'))
@@ -578,20 +583,25 @@ def run_playbook(playbook, engine, service_map, ansible_options='',
 
 @conductor_only
 def apply_role_to_container(role, container_id, service_name, engine, vars={},
-                            python_interpreter=None, ansible_options='',
+                            local_python=False, ansible_options='',
                             debug=False):
     playbook = [
         {'hosts': service_name,
          'vars': vars,
-         'roles': [role]}
+         'roles': [role],
+         }
     ]
 
+    if isinstance(role, dict) and role.get('gather_facts', None) is not None:
+        # Allow disabling gather_facts at the role level
+        playbook[0]['gather_facts'] = role.get('gather_facts')
+
     container_metadata = engine.inspect_container(container_id)
     onbuild = container_metadata['Config']['OnBuild']
     # FIXME: Actually do stuff if onbuild is not null
 
-    rc = run_playbook(playbook, engine, {service_name: container_id},
-                      python_interpreter, ansible_options, debug)
+    rc = run_playbook(playbook, engine, {service_name: container_id}, ansible_options=ansible_options,
+                      local_python=local_python, debug=debug)
     if rc:
         logger.error('Error applying role!', playbook=playbook, engine=engine,
             exit_code=rc)
@@ -600,7 +610,7 @@ def apply_role_to_container(role, container_id, service_name, engine, vars={},
 
 @conductor_only
 def conductorcmd_build(engine_name, project_name, services, cache=True,
-          python_interpreter=None, ansible_options='', debug=False, **kwargs):
+          local_python=False, ansible_options='', debug=False, **kwargs):
     engine = load_engine(['BUILD'], engine_name, project_name, services, **kwargs)
     logger.info(u'%s integration engine loaded. Build starting.',
         engine.display_name, project=project_name)
@@ -647,32 +657,36 @@ def conductorcmd_build(engine_name, project_name, services, cache=True,
                             service=service_name,
                             fingerprint=fingerprint_hash.hexdigest(),
                         )
-
-                container_id = engine.run_container(
-                    cur_image_id,
-                    service_name,
+                run_kwargs = dict(
                     name=engine.container_name_for_service(service_name),
                     user='root',
                     working_dir='/',
                     command='sh -c "while true; do sleep 1; '
                             'done"',
-                    entrypoint=[],
-                    environment=dict(LD_LIBRARY_PATH='/_usr/lib:/_usr/local/lib',
-                                     CPATH='/_usr/include:/_usr/local/include',
-                                     PATH='/usr/local/sbin:/usr/local/bin:'
-                                          '/usr/sbin:/usr/bin:/sbin:/bin:'
-                                          '/_usr/sbin:/_usr/bin:'
-                                          '/_usr/local/sbin:/_usr/local/bin',
-                                     PYTHONPATH='/_usr/lib/python2.7'),
-                    volumes={engine.get_runtime_volume_id(): {'bind': '/_usr',
-                                                              'mode': 'ro'}})
+                    entrypoint=[]
+                )
+
+                if not local_python:
+                    # Use the conductor's Python runtime
+                    run_kwargs['environment'] = dict(
+                         LD_LIBRARY_PATH='/_usr/lib:/_usr/local/lib',
+                         CPATH='/_usr/include:/_usr/local/include',
+                         PATH='/usr/local/sbin:/usr/local/bin:'
+                              '/usr/sbin:/usr/bin:/sbin:/bin:'
+                              '/_usr/sbin:/_usr/bin:'
+                              '/_usr/local/sbin:/_usr/local/bin',
+                         PYTHONPATH='/_usr/lib/python2.7')
+                    run_kwargs['volumes'] = {engine.get_runtime_volume_id(): {'bind': '/_usr', 'mode': 'ro'}}
+
+                container_id = engine.run_container(cur_image_id, service_name, **run_kwargs)
+
                 while not engine.service_is_running(service_name):
                     time.sleep(0.2)
                 logger.debug('Container running', id=container_id)
 
                 rc = apply_role_to_container(role, container_id, service_name,
                                              engine, vars=dict(service['defaults']),
-                                             python_interpreter=python_interpreter,
+                                             local_python=local_python,
                                              ansible_options=ansible_options,
                                              debug=debug)
                 logger.debug('Playbook run finished.', exit_code=rc)
diff --git a/container/docker/templates/conductor-dockerfile.j2 b/container/docker/templates/conductor-dockerfile.j2
index 28723bd..734c2cb 100644
--- a/container/docker/templates/conductor-dockerfile.j2
+++ b/container/docker/templates/conductor-dockerfile.j2
@@ -10,6 +10,7 @@ RUN yum update -y && \
 RUN apt-get update -y && \
     apt-get install -y gcc python2.7 git python-dev rsync libffi-dev libssl-dev python-apt && \
     cd /usr/bin && \
+    rm -f lsb_release && \
     ln -fs python2.7 python && \
     apt-get clean
 {% elif distro in ["alpine"] %}
diff --git a/docs/rst/reference/build.rst b/docs/rst/reference/build.rst
index 98bc5c8..12f18b7 100644
--- a/docs/rst/reference/build.rst
+++ b/docs/rst/reference/build.rst
@@ -47,11 +47,11 @@ To disable these caches and ensure a clean rebuild, use this option.
 Define one or more environment variables in the Ansible Conductor container. Format each variable as a
 key=value string.
 
-.. option:: --python-interpreter PYTHON_INTERPRETER_PATH
+.. option:: --use-local-python
 
-Ansible Container uses the Python interpreter exported from the Conductor container
-into your target images for Ansible builds. If you wish to bring your own Python
-runtime, use this option to specify the path to it.
+Ansible Container will mount the ``/usr`` volume from the conductor container into the target container as ``/_usr``,
+and use the Python runtime from ``/_usr`` to run Ansible modules. Use this option to prevent this behavior, and force
+it to use the Python runtime found locally on the target container.
 
 .. option:: ansible_options
 
