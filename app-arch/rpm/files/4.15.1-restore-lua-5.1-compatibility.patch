diff --git a/INSTALL b/INSTALL
index c41917e1e..ff9fcc729 100644
--- a/INSTALL
+++ b/INSTALL
@@ -85,7 +85,7 @@ Minimal instructions for building BDB are
     make install
 
 For embedded Lua scripting support (recommended and enabled by default),
-you'll need Lua >= 5.2 library + development environment installed.
+you'll need Lua >= 5.1 library + development environment installed.
 Note that only the library is needed at runtime, RPM never calls external
 Lua interpreter for anything. Lua is available from 
     http://www.lua.org
diff --git a/lib/rpmliblua.c b/lib/rpmliblua.c
index 93f7c9d52..4f91b4364 100644
--- a/lib/rpmliblua.c
+++ b/lib/rpmliblua.c
@@ -1,7 +1,6 @@
 #include "system.h"
 
 #include <lua.h>
-#include <lauxlib.h>
 
 #include <rpm/rpmlib.h>
 
diff --git a/luaext/lposix.c b/luaext/lposix.c
index a3f4852cf..fe1952d2e 100644
--- a/luaext/lposix.c
+++ b/luaext/lposix.c
@@ -823,6 +823,25 @@ static int Pmkstemp(lua_State *L)
 	return 2;
 }
 
+static int Predirect2null(lua_State *L)
+{
+    int target_fd, fd, r, e;
+
+    if (!_rpmlua_have_forked)
+	return luaL_error(L, "redirect2null not permitted in this context");
+
+    target_fd = luaL_checkinteger(L, 1);
+
+    r = fd = open("/dev/null", O_WRONLY);
+    if (fd >= 0 && fd != target_fd) {
+	r = dup2(fd, target_fd);
+	e = errno;
+	(void) close(fd);
+	errno = e;
+    }
+    return pushresult(L, r, NULL);
+}
+
 static const luaL_Reg R[] =
 {
 	{"access",		Paccess},
@@ -865,12 +884,13 @@ static const luaL_Reg R[] =
 	{"wait",		Pwait},
 	{"setenv",		Psetenv},
 	{"unsetenv",		Punsetenv},
+	{"redirect2null",       Predirect2null},
 	{NULL,			NULL}
 };
 
 LUALIB_API int luaopen_posix (lua_State *L)
 {
-	luaL_newlib(L, R);
+	luaL_openlib(L, MYNAME, R, 0);
 	lua_pushliteral(L,"version");		/** version */
 	lua_pushliteral(L,MYVERSION);
 	lua_settable(L,-3);
diff --git a/luaext/lrexlib.c b/luaext/lrexlib.c
index 09c5a6454..9da5c8254 100644
--- a/luaext/lrexlib.c
+++ b/luaext/lrexlib.c
@@ -327,14 +327,14 @@ LUALIB_API int luaopen_rex(lua_State *L)
 {
 #ifdef WITH_POSIX
   createmeta(L, "regex_t");
-  luaL_setfuncs(L, rexmeta, 0);
+  luaL_openlib(L, NULL, rexmeta, 0);
   lua_pop(L, 1);
 #endif
 #ifdef WITH_PCRE
   createmeta(L, "pcre");
-  luaL_setfuncs(L, pcremeta, 0);
+  luaL_openlib(L, NULL, pcremeta, 0);
   lua_pop(L, 1);
 #endif
-  luaL_newlib(L, rexlib);
+  luaL_openlib(L, "rex", rexlib, 0);
   return 1;
 }
diff --git a/rpmio/rpmlua.c b/rpmio/rpmlua.c
index c698ff098..9689e2aa8 100644
--- a/rpmio/rpmlua.c
+++ b/rpmio/rpmlua.c
@@ -6,18 +6,26 @@
 #include <lposix.h>
 #include <lrexlib.h>
 
+#if (LUA_VERSION_NUM < 502)
+#define lua_rawlen(L, i) (lua_objlen(L, i))
+#endif
+
 #ifndef LUA_LOADED_TABLE
 /* feature introduced in Lua 5.3.4 */
 #define LUA_LOADED_TABLE "_LOADED"
 #endif
 
+/* define added in 5.2 */
+#ifndef lua_pushglobaltable
+#define lua_pushglobaltable(L)	lua_pushvalue(L, LUA_GLOBALSINDEX)
+#endif
+
 #include <unistd.h>
 #include <assert.h>
 #include <spawn.h>
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <stdarg.h>
-#include <errno.h>
 
 #include <rpm/rpmio.h>
 #include <rpm/rpmmacro.h>
@@ -80,7 +88,6 @@ static void *nextFileFuncParam = NULL;
 static int luaopen_rpm(lua_State *L);
 static int rpm_print(lua_State *L);
 static int rpm_exit(lua_State *L);
-static int rpm_redirect2null(lua_State *L);
 
 static int pusherror(lua_State *L, int code, const char *info)
 {
@@ -115,12 +122,6 @@ static const luaL_Reg os_overrides[] =
     {NULL,      NULL}
 };
 
-static const luaL_Reg posix_overrides[] =
-{
-    {"redirect2null",	rpm_redirect2null},
-    {NULL,      NULL}
-};
-
 rpmlua rpmluaNew()
 {
     rpmlua lua = NULL;
@@ -144,15 +145,16 @@ rpmlua rpmluaNew()
     lua->L = L;
 
     for (lib = extlibs; lib->name; lib++) {
-	luaL_requiref(L, lib->name, lib->func, 1);
+	lua_pushcfunction(L, lib->func);
+	lua_pushstring(L, lib->name);
+	lua_call(L, 1, 0);
+	lua_settop(L, 0);
     }
     lua_pushcfunction(L, rpm_print);
     lua_setglobal(L, "print");
 
-    lua_getglobal(L, "os");
-    luaL_setfuncs(L, os_overrides, 0);
-    lua_getglobal(L, "posix");
-    luaL_setfuncs(L, posix_overrides, 0);
+    lua_pushglobaltable(L);
+    luaL_openlib(L, "os", os_overrides, 0);
 
     lua_getglobal(L, "package");
     lua_pushfstring(L, "%s/%s", rpmConfigDir(), "/lua/?.lua");
@@ -179,12 +181,15 @@ rpmlua rpmluaFree(rpmlua lua)
     return NULL;
 }
 
-void rpmluaRegister(rpmlua lua, const void *regfuncs, const char *lib)
+void rpmluaRegister(rpmlua lua, const luaL_Reg *funcs, const char *lib)
 {
-    const luaL_Reg *funcs = regfuncs;
     lua_getfield(lua->L, LUA_REGISTRYINDEX, LUA_LOADED_TABLE);
     lua_getfield(lua->L, -1, lib);
+#if (LUA_VERSION_NUM < 502) || defined(LUA_COMPAT_MODULE)
+    luaL_register(lua->L, 0, funcs);
+#else
     luaL_setfuncs(lua->L, funcs, 0);
+#endif
     lua_pop(lua->L, 2);
 }
 
@@ -949,25 +954,6 @@ static int rpm_print (lua_State *L)
     return 0;
 }
 
-static int rpm_redirect2null(lua_State *L)
-{
-    int target_fd, fd, r, e;
-
-    if (!_rpmlua_have_forked)
-	return luaL_error(L, "redirect2null not permitted in this context");
-
-    target_fd = luaL_checkinteger(L, 1);
-
-    r = fd = open("/dev/null", O_WRONLY);
-    if (fd >= 0 && fd != target_fd) {
-	r = dup2(fd, target_fd);
-	e = errno;
-	(void) close(fd);
-	errno = e;
-    }
-    return pushresult(L, r, NULL);
-}
-
 static int rpm_exit(lua_State *L)
 {
     if (!_rpmlua_have_forked)
@@ -1014,12 +1000,12 @@ static const luaL_Reg rpmlib[] = {
     {"interactive", rpm_interactive},
     {"next_file", rpm_next_file},
     {"execute", rpm_execute},
-    {"redirect2null", rpm_redirect2null},
     {NULL, NULL}
 };
 
 static int luaopen_rpm(lua_State *L)
 {
-    luaL_newlib(L, rpmlib);
-    return 1;
+    lua_pushglobaltable(L);
+    luaL_openlib(L, "rpm", rpmlib, 0);
+    return 0;
 }
diff --git a/rpmio/rpmlua.h b/rpmio/rpmlua.h
index 05fe69753..87418c621 100644
--- a/rpmio/rpmlua.h
+++ b/rpmio/rpmlua.h
@@ -1,6 +1,10 @@
 #ifndef RPMLUA_H
 #define RPMLUA_H
 
+#ifdef WITH_LUA
+#include <lauxlib.h>
+#endif
+
 typedef enum rpmluavType_e {
     RPMLUAV_NIL		= 0,
     RPMLUAV_STRING	= 1,
@@ -19,7 +23,9 @@ rpmlua rpmluaNew(void);
 rpmlua rpmluaFree(rpmlua lua);
 rpmlua rpmluaGetGlobalState(void);
 
-void rpmluaRegister(rpmlua lua, const void *regfuncs, const char *lib);
+#ifdef WITH_LUA
+void rpmluaRegister(rpmlua lua, const luaL_Reg *funcs, const char *lib);
+#endif
 
 int rpmluaCheckScript(rpmlua lua, const char *script,
 		      const char *name);
